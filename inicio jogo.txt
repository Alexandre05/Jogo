CLASSE LIXO, DO JOGO;
Tpublic class Trash {
    private Texture texture;
    private Rectangle bounds;
    private int type;
    private boolean isOutOfBounds;
    private boolean isCorrect;

    public Trash(int x, int y, int type, Texture texture) {
        this.type = type;
        this.texture = texture;
        bounds = new Rectangle(x, y, texture.getWidth(), texture.getHeight());
    }

    public void update(float delta) {
        bounds.y -= 200 * delta;
        if (bounds.y < 0) {
            isOutOfBounds = true;
        }
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, bounds.x, bounds.y);
    }

    public Rectangle getBounds() {
        return bounds;
    }

    public int getType() {
        return type;
    }

    public boolean isOutOfBounds() {
        return isOutOfBounds;
    }

    public void setCorrect(boolean correct) {
        isCorrect = correct;
    }

    public boolean isCorrect() {
        return isCorrect;
    }
}

CLASSE LIXEIRA
public class Bin {
    private Texture texture;
    private Rectangle bounds;
    private int type;

    public Bin(int x, int y, int type, Texture texture) {
        this.type = type;
        this.texture = texture;
        bounds = new Rectangle(x, y, texture.getWidth(), texture.getHeight());
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, bounds.x, bounds.y);
    }

    public Rectangle getBounds() {
        return bounds;
    }

    public int getType() {
        return type;
    }
}
 LOGICA DO JOGO
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.Disposable;
import com.badlogic.gdx.utils.GdxRuntimeException;

import java.util.Iterator;

public class RecycleGame extends ApplicationAdapter {
    private SpriteBatch batch;
    private Texture backgroundTexture;
    private Array<Trash> trashArray;
    private Array<Bin> binArray;
    private BitmapFont font;
    private int score = 0;
    private float timeElapsed = 0f;
    private Texture trashTexture1, trashTexture2, trashTexture3, trashTexture4;
    private Texture binTexture1, binTexture2, binTexture3, binTexture4;
    private Sound correctSound, incorrectSound;

    @Override
    public void create() {
        batch = new SpriteBatch();
        backgroundTexture = new Texture("background.png");
        font = new BitmapFont(Gdx.files.internal("font.fnt"), false);
        trashTexture1 = new Texture("trash1.png");
        trashTexture2 = new Texture("trash2.png");
        trashTexture3 = new Texture("trash3.png");
        trashTexture4 = new Texture("trash4.png");
        binTexture1 = new Texture("bin1.png");
        binTexture2 = new Texture("bin2.png");
        binTexture3 = new Texture("bin3.png");
        binTexture4 = new Texture("bin4.png");
        correctSound = Gdx.audio.newSound(Gdx.files.internal("correct.ogg"));
        incorrectSound = Gdx.audio.newSound(Gdx.files.internal("incorrect.ogg"));
        trashArray = new Array<>();
        binArray = new Array<>();
        spawnTrash();
        spawnBins();
    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(1, 1, 1, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        batch.begin();
        batch.draw(backgroundTexture, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        font.draw(batch, "Score: " + score, 10, Gdx.graphics.getHeight() - 10);

        for (Trash trash : trashArray) {
            trash.render(batch);
        }

        for (Bin bin : binArray) {
            bin.render(batch);
        }

        batch.end();

        updateTrash();
        checkCollisions();
        spawnTrashIfNeeded();
    }

    @Override
    public void dispose() {
        batch.dispose();
        backgroundTexture.dispose();
        font.dispose();
        trashTexture1.dispose();
        trashTexture2.dispose();
        trashTexture3.dispose();
        trashTexture4.dispose();
        binTexture1.dispose();
        binTexture2.dispose();
        binTexture3.dispose();
        binTexture4.dispose();
        correctSound.dispose();
        incorrectSound.dispose();

        for (Disposable trashTexture : trashArray) {
            trashTexture.dispose();
        }

        for (Disposable binTexture : binArray) {
            binTexture.dispose();
        }
    }

    private void spawnTrash() {
        for (int i = 0; i < 4; i++) {
            Trash trash;
            int type = i + 1;
            Texture texture;
            switch (type) {
                case 1:
                    texture = trashTexture1;
                    break;
                case 2:
                    texture = trashTexture2;
                    break;
                case 3:
                 texture = trashTexture3;
break;
case 4:
texture = trashTexture4;
break;
default:
throw new GdxRuntimeException("Invalid trash type");
}
float x = MathUtils.random
break;
default:
throw new GdxRuntimeException("Invalid trash type: " + type);
}
float x = MathUtils.random(0, Gdx.graphics.getWidth() - texture.getWidth());
float y = MathUtils.random(Gdx.graphics.getHeight(), Gdx.graphics.getHeight() * 2);
trash = new Trash(texture, x, y, type);
trashArray.add(trash);
}
}
private void spawnBins() {
    for (int i = 0; i < 4; i++) {
        Bin bin;
        int type = i + 1;
        Texture texture;
        switch (type) {
            case 1:
                texture = binTexture1;
                break;
            case 2:
                texture = binTexture2;
                break;
            case 3:
                texture = binTexture3;
                break;
            case 4:
                texture = binTexture4;
                break;
            default:
                throw new GdxRuntimeException("Invalid bin type: " + type);
        }
        float x = i * (Gdx.graphics.getWidth() / 4f);
        float y = 0;
        bin = new Bin(texture, x, y, type);
        binArray.add(bin);
    }
}

private void updateTrash() {
    Iterator<Trash> iterator = trashArray.iterator();
    while (iterator.hasNext()) {
        Trash trash = iterator.next();
        trash.update(Gdx.graphics.getDeltaTime());
        if (trash.getY() + trash.getHeight() < 0) {
            iterator.remove();
            score--;
            incorrectSound.play();
        }
    }
}

private void checkCollisions() {
    for (Trash trash : trashArray) {
        for (Bin bin : binArray) {
            if (trash.getBoundingRectangle().overlaps(bin.getBoundingRectangle())) {
                if (trash.getType() == bin.getType()) {
                    trash.dispose();
                    bin.dispose();
                    score++;
                    correctSound.play();
                } else {
                    score--;
                    incorrectSound.play();
                }
                trashArray.removeValue(trash, true);
                binArray.removeValue(bin, true);
                break;
            }
        }
    }
}

private void spawnTrashIfNeeded() {
    timeElapsed += Gdx.graphics.getDeltaTime();
    if (timeElapsed > 1f) {
        spawnTrash();
        timeElapsed = 0f;
    }
}

